%% Parameter Settings
N = 100;                % Population size
p_plus = 1/(N);         % Probability of switching from environment 1 to 2
p_minus = 1/(3*N);      % Probability of switching from environment 2 to 1
beta = 1;               % Selection intensity
num_steps = 1000;       % Maximum steps per simulation
num_simulations = 1000; % Number of simulations per parameter combination
env_update_interval = 1;

% Heatmap Parameter Settings
mu_resolution = 100;    % Resolution for mu values
sigma_resolution = 100; % Resolution for sigma values
mu_range = linspace(-6, 6, mu_resolution);  % Range of mu values
sigma_range = linspace(0, 10, sigma_resolution);  % Range of sigma values
[mu_grid, sigma_grid] = meshgrid(mu_range, sigma_range); % Create meshgrid for plotting
fixation_probs = zeros(size(mu_grid)); % Matrix to store fixation probabilities

% Pre-compute steady-state probabilities for environment state transitions
p1 = p_minus / (p_plus + p_minus); % Steady-state probability of being in environment 1
p2 = p_plus / (p_plus + p_minus);  % Steady-state probability of being in environment 2

%% Main Computation Loop
for mu_idx = 1:mu_resolution
    current_mu = mu_range(mu_idx);
    fprintf('\nProcessing μ=%.2f (%d/%d)', current_mu, mu_idx, mu_resolution);

    for sigma_idx = 1:sigma_resolution
        current_sigma = sigma_range(sigma_idx);
        fixation_count = 0;  % Counter for fixation of mutant individuals

        % Skip invalid parameter combinations
        if p1 == 0 || p2 == 0
            fixation_probs(sigma_idx, mu_idx) = 0;
            continue;
        end

        % Compute fitness parameters (payoffs)
        a1 = current_mu - current_sigma * sqrt(p2 / p1);  % Payoff for specialist A in environment 1
        a2 = current_mu + current_sigma * sqrt(p1 / p2);  % Payoff for specialist A in environment 2

        for sim = 1:num_simulations
            % Initialize: one mutant, rest are wild-type (false)
            pop = false(1, N);  
            pop(randi(N)) = true;  % Randomly select one mutant individual

            env = randi([1, 2]);   % Randomly select initial environment (1 or 2)

            for step = 1:num_steps
                % Check if all individuals are mutants (fixation)
                if all(pop)
                    fixation_count = fixation_count + 1;
                    break;
                end

                % Randomly select two individuals for competition
                idx = randperm(N, 2);
                i = idx(1); j = idx(2);

                % Calculate payoffs for individuals i and j
                pi_i = pop(i) * ((env == 1) * a1 + (env == 2) * a2);
                pi_j = pop(j) * ((env == 1) * a1 + (env == 2) * a2);

                % Simulate selection and reproduction (winner replicates loser)
                delta_pi = pi_i - pi_j;
                if rand < 1 / (1 + exp(-beta * delta_pi))
                    pop(j) = pop(i); % i reproduces and replaces j
                else
                    pop(i) = pop(j); % j reproduces and replaces i
                end

                % Environment update
                if mod(step, env_update_interval) == 0
                    if env == 1 && rand < p_plus
                        env = 2;
                    elseif env == 2 && rand < p_minus
                        env = 1;
                    end
                end
            end
        end

        % Record fixation probability for current (mu, sigma) combination
        fixation_probs(sigma_idx, mu_idx) = fixation_count / num_simulations;
    end
end

%% Visualizing the Heatmap and Boundary
figure('Position', [100, 100, 800, 600]);
imagesc(mu_range, sigma_range, fixation_probs);  % Plot the fixation probability as a heatmap
set(gca, 'YDir', 'normal');  % Set Y-axis direction to normal (bottom to top)
caxis([0 1]);  % Set color scale range from 0 to 1
colormap(flipud(jet));  % ✅ Use reversed jet colormap
colorbar;  % Display colorbar

% Set colorbar label
cb = colorbar;
cb.Label.String = 'Fixation probability \phi';
cb.Label.FontSize = 22;
cb.Label.FontWeight = 'bold';
cb.Label.FontName = 'Times New Roman';

% Label x and y axes
xlabel('\mu', 'FontSize', 26, 'FontName', 'Times New Roman', 'FontWeight', 'bold');
ylabel('\sigma', 'FontSize', 26, 'FontName', 'Times New Roman', 'FontWeight', 'bold');

% Set axis font size and style
set(gca, 'FontSize', 20, 'FontName', 'Times New Roman', 'FontWeight', 'bold');

box on;
