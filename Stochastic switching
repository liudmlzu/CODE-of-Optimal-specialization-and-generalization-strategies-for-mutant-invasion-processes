% ===== Simulation Parameters =====
N = 100;               % Population size
p_plus = 1/(N);        % Probability of switching from environment 1 to 2
p_minus = 1/(3*N);     % Probability of switching from environment 2 to 1
beta = 1;              % Selection intensity
num_steps = 1000;      % Maximum number of steps per simulation
num_simulations = 10000; % Number of simulations per mu value
env_update_interval = 1;
mu_range = linspace(-3, 6, 40);  % Range of mu values

% Steady-state probability of environment states
p1 = p_minus / (p_plus + p_minus);
p2 = p_plus / (p_plus + p_minus);
a1_fun = @(mu, sigma) mu - sigma * sqrt(p2 / p1);
a2_fun = @(mu, sigma) mu + sigma * sqrt(p1 / p2);

% Fixed sigma value
sigma_fixed = 6;

% List of strategies: rho = 1, rho = 0, rho = 0.5
rho_list = [0, 0.5, 1];  % Values for rho: 0, 0.5, 1
labels = { '\rho = 0', 'Stochastic switching, \sigma = 6', '\rho = 1, \sigma = 6' };
colors = {'r', 'b', 'k'};  % Colors for each rho value (Red for rho=0, Black for rho=0.5, Blue for rho=1)
markers = {'s', 'd', 'o'};  % Marker shapes: square, diamond, circle
linestyles = {'--', '-.', '-'};  % Line styles

% Store the results
fixation_data = zeros(length(rho_list), length(mu_range));

% ===== Main Simulation Loop =====
for r = 1:length(rho_list)
    rho = rho_list(r);
    fprintf('\nSimulating rho = %.1f\n', rho);

    for mu_idx = 1:length(mu_range)
        mu = mu_range(mu_idx);
        sigma = sigma_fixed;
        fixation_count = 0;

        for sim = 1:num_simulations
            % Initialize
            population = zeros(1, N);
            mutant_idx = randi(N);

            % Initialize population based on rho value
            if rho == 0  % rho = 0: Specialist fixed
                population(mutant_idx) = 2;  % Generalist
            elseif rho == 1  % rho = 1: Generalist fixed
                population(mutant_idx) = 1;  % Specialist
            elseif rho == 0.5  % rho = 0.5: Markov switching
                if rand < 0.5
                    population(mutant_idx) = 1;  % Specialist
                else
                    population(mutant_idx) = 2;  % Generalist
                end
            end
            env = randi([1, 2]);

            a1 = a1_fun(mu, sigma);
            a2 = a2_fun(mu, sigma);

            for step = 1:num_steps
                if all(population ~= 0)
                    fixation_count = fixation_count + 1;
                    break;
                end

                idx = randperm(N, 2);
                i = idx(1); j = idx(2);

                % Fitness calculation
                pi_i = (population(i) == 1) * ((env == 1) * a1 + (env == 2) * a2) + ...
                       (population(i) == 2) *  (0.25 * mu);
                pi_j = (population(j) == 1) * ((env == 1) * a1 + (env == 2) * a2) + ...
                       (population(j) == 2) *  (0.25 * mu);

                g_plus = 1 / (1 + exp(-beta * (pi_i - pi_j)));
                if rand < g_plus
                    population(j) = population(i);
                else
                    population(i) = population(j);
                end

                % Environment change
                if mod(step, env_update_interval) == 0
                    if env == 1 && rand < p_plus
                        env = 2;
                    elseif env == 2 && rand < p_minus
                        env = 1;
                    end
                end

                % Markov process for rho = 0.5: Strategy switching
                if rho == 0.5
                    for k = 1:N
                        if population(k) == 1  % Specialist state
                            if rand < 1/(N)  % p_spec2gen: Specialist to Generalist conversion probability
                                population(k) = 2;  % Switch to Generalist
                            end
                        elseif population(k) == 2  % Generalist state
                            if rand < 1/(3*N)  % p_gen2spec: Generalist to Specialist conversion probability
                                population(k) = 1;  % Switch to Specialist
                            end
                        end
                    end
                end
            end
        end
        fixation_data(r, mu_idx) = fixation_count / num_simulations;
    end
end

% ===== Plotting =====
figure('Position', [100, 100, 800, 600]);
hold on;
for r = 1:length(rho_list)
    plot(mu_range, fixation_data(r,:), ...
        'Color', colors{r}, ...
        'LineStyle', linestyles{r}, ...
        'Marker', markers{r}, ...
        'LineWidth', 2.2, ...
        'MarkerSize', 8, ...
        'DisplayName', labels{r});
end

xlabel('\mu', 'FontSize', 26, 'FontName', 'Times New Roman', 'FontWeight', 'bold');
ylabel('\phi', 'FontSize', 26, 'FontName', 'Times New Roman', 'FontWeight', 'bold');
set(gca, 'FontSize', 20, 'FontName', 'Times New Roman', 'FontWeight', 'bold');
legend('Location', 'northwest', 'FontSize', 18, 'FontName', 'Times New Roman');
box on;
