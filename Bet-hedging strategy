%% Parameter Settings
N = 100;               % Population size
p_plus = 1/(3*N);      % Probability of switching from environment 1 to 2
p_minus = 1/(N);       % Probability of switching from environment 2 to 1
sigma = 6;             % Payoff standard deviation for type A
beta = 1;              % Selection intensity
num_steps = 1000;      % Number of simulation steps
num_simulations = 1000; % Number of simulations for each parameter set
env_update_interval = 1;

% Parameter range for scanning
mu_values = linspace(-6, 6, 100);   % Range of 100 mu values
rho_values = linspace(0, 1, 100);   % Range of 100 rho values

% Pre-allocate matrix for storing fixation probabilities
fixation_prob_matrix = zeros(length(rho_values), length(mu_values));

% Calculate steady-state probabilities for environment state transitions
p1 = p_minus / (p_plus + p_minus);
p2 = p_plus / (p_plus + p_minus);

%% Parameter Sweep Loop
for mu_idx = 1:length(mu_values)
    mu = mu_values(mu_idx);
    fprintf('\nProcessing μ=%.2f (%d/%d)', mu, mu_idx, length(mu_values));

    for rho_idx = 1:length(rho_values)
        rho = rho_values(rho_idx);
        fixation_count = 0;  % Counter for fixation of A-type individuals

        % Multiple simulations for each (mu, rho) combination
        for sim = 1:num_simulations
            % ✅ Initialize population: Only one A-type, rest are B-type (0)
            population = zeros(1, N);  % All B-type (0)
            mutant_idx = randi(N);     % Randomly select one individual as the A-type mutant
            if rand < rho
                population(mutant_idx) = 1; % Specialist A
            else
                population(mutant_idx) = 2; % Generalist A
            end

            % Initialize environment (1 or 2)
            environment = randi([1, 2]);

            for step = 1:num_steps
                if all(population ~= 0)
                    fixation_count = fixation_count + 1; % If all are of type A
                    break;
                end

                idx = randperm(N, 2);  % Randomly select two individuals
                i = idx(1);
                j = idx(2);

                a1 = mu - sigma * sqrt(p2 / p1);  % Payoff for specialist A in environment 2
                a2 = mu + sigma * sqrt(p1 / p2);  % Payoff for specialist A in environment 1

                % Individual i's payoff
                if population(i) == 1
                    pi_i = a1 * (environment == 1) + a2 * (environment == 2);
                elseif population(i) == 2
                    pi_i = 0.5 * mu;  % Generalist payoff
                else
                    pi_i = 0;
                end

                % Individual j's payoff
                if population(j) == 1
                    pi_j = a1 * (environment == 1) + a2 * (environment == 2);
                elseif population(j) == 2
                    pi_j = 0.5 * mu;  % Generalist payoff
                else
                    pi_j = 0;
                end

                delta_pi = pi_i - pi_j;
                g_plus = 1 / (1 + exp(-beta * delta_pi));  % Probability of individual i winning

                % Competition update (the winner copies the type of the loser)
                if rand < g_plus
                    population(j) = population(i);
                else
                    population(i) = population(j);
                end

                % Environment update every certain number of steps
                if mod(step, env_update_interval) == 0
                    if environment == 1 && rand < p_plus
                        environment = 2;
                    elseif environment == 2 && rand < p_minus
                        environment = 1;
                    end
                end
            end  % End of simulation steps
        end  % End of multiple simulations
        
        % Record the fixation probability for the current (mu, rho) combination
        fixation_prob_matrix(rho_idx, mu_idx) = fixation_count / num_simulations;
    end
end

%% Plot Heatmap
figure('Position', [100, 100, 800, 600]);
imagesc(mu_values, rho_values, fixation_prob_matrix);  % Plot the fixation probability as a heatmap
set(gca, 'YDir', 'normal');  % Set Y-axis direction to normal (bottom to top)
caxis([0 1]);  % Set the color scale from 0 to 1
colormap(flipud(jet));  % ✅ Use reversed jet colormap
colorbar;  % Display colorbar

% ✅ Set colorbar label
cb = colorbar;
cb.Label.String = 'Fixation probability \phi';
cb.Label.FontSize = 22;
cb.Label.FontWeight = 'bold';
cb.Label.FontName = 'Times New Roman';

% Label x and y axes
xlabel('\mu', 'FontSize', 26, 'FontName', 'Times New Roman', 'FontWeight', 'bold');
ylabel('\rho', 'FontSize', 26, 'FontName', 'Times New Roman', 'FontWeight', 'bold');

% Set axis font size and style
set(gca, 'FontSize', 20, 'FontName', 'Times New Roman', 'FontWeight', 'bold');

box on;
